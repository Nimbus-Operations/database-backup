[build-system]
requires = ["setuptools"]

[project]
name = "database-backup"
authors = [
    {name = "Matthew Pounsett", email = "matt@NimbusOps.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = [
    "backup",
    "database",
    "PostgreSQL",
]
requires-python = ">= 3.11"
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Environment :: Console',
    'Intended Audience :: System Administrators',
    'Natural Language :: English',
    'Operating System :: POSIX',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3.14',
    'Programming Language :: Python :: 3.15',
    'Topic :: Database',
    'Topic :: System :: Archiving :: Backup',
]

dependencies = [
    'pydantic==2.11',
    'pydantic-settings',
]
dynamic = ["version"]

[project.scripts]
database-backup = "database_backup:main"

[tool.setuptools.dynamic]
version = {attr = "db_backup.__version__"}

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
dev = [
    "isort",
    "mkdocs",
    "mkdocs-material",
    "pre-commit",
    "pymdown-extensions",
    "pytest",
    "pytest-cov",
    "semantic_version",
    "setuptools",
    "tox"
]

[dependency-groups]
lint = [
    "coverage",
    "pytest",
    "pytest-cov",
    "semantic_version",
    "setuptools",
    "sqlalchemy[mypy]"
]

[tool.mypy]
ignore_missing_imports = true

[tool.pylint."messages control"]
max-line-length = 100

[tool.ruff]
line-length = 100
respect-gitignore = true
force-exclude = true
extend-exclude = ["alembic/env.py"]

[tool.ruff.lint]
# more flake8-like
extend-select = ["C901", "D", "E", "F", "W"]
ignore = ["E24"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tox]
env_list = [
    "clean",
    "ruff",
    "py311",
    "py312",
    "py313",
    "stats"
]

[tool.tox.env.bandit]
description = "run bandit security scan"
commands = [["bandit", "-r", "database_backup", "-q"]]
deps = ["bandit"]
ignore_errors = true

[tool.tox.env.clean]
description = "clean up old coverage data"
commands = [["coverage", "erase"]]
deps = ["coverage"]
skip_install = true

[tool.tox.env.flake8]
description = "run flake8"
commands = [["flake8", "database_backup", "tests"]]
deps = [
    "flake8",
    "flake8-docstrings",
    "flake8-pyproject"
]
ignore_errors = true

[tool.tox.env.mypy]
description = "run mypy security scan"
commands = [["mypy", "database_backup", "tests"]]
deps = ["mypy"]
dependency_groups = [
    "lint"
]
ignore_errors = true

[tool.tox.env.pip-audit]
description = "run pip-audit"
commands = [["pip-audit", "--skip-editable"]]
deps = ["pip-audit"]
dependency_groups = [
    "lint"
]
ignore_errors = true

[tool.tox.env.pylint]
description = "run pylint"
commands = [["pylint", "database_backup", "tests"]]
deps = ["pylint"]
ignore_errors = true

[tool.tox.env.ruff]
description = "run ruff"
commands = [["ruff", "check", "database_backup", "tests"]]
deps = ["ruff"]
ignore_errors = true

[tool.tox.env.stats]
description = "generate coverage report"
commands = [
    ["coverage", "report"],
    ["coverage", "html"]
]
deps = ["coverage"]
skip_install = true

[tool.tox.env_run_base]
description = "run unit tests"
commands = [
    [
        "pytest",
        "-v",
        "--cov=database_backup",
        "--cov-report=html",
        "--cov-append",
        {replace = "posargs", default = ["tests"], extend = true}
    ]
]
dependency_groups = [
    "lint"
]
